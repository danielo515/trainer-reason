// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Json = require("@glennsl/bs-json/src/Json.bs.js");
var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");
var Trainer$ReasonTrainer = require("./Trainer.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function session(param) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "start",
                param[/* start */2]
              ],
              /* :: */[
                /* tuple */[
                  "end",
                  param[/* _end */3]
                ],
                /* :: */[
                  /* tuple */[
                    "table",
                    param[/* table */0]
                  ],
                  /* :: */[
                    /* tuple */[
                      "session",
                      param[/* session */1]
                    ],
                    /* [] */0
                  ]
                ]
              ]
            ]);
}

function state(param) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "tables",
                Json_encode.list(Trainer$ReasonTrainer.Encode[/* table */2], param[/* tables */1])
              ],
              /* :: */[
                /* tuple */[
                  "completed_sessions",
                  Json_encode.list(session, param[/* completed_sessions */3])
                ],
                /* [] */0
              ]
            ]);
}

var Encode = /* module */[
  /* session */session,
  /* state */state
];

function session$1(str) {
  return /* record */[
          /* table */Json_decode.field("table", Json_decode.string, str),
          /* session */Json_decode.field("session", Json_decode.string, str),
          /* start */Json_decode.field("start", Json_decode.$$float, str),
          /* _end */Json_decode.field("end", Json_decode.$$float, str)
        ];
}

function state$1(str) {
  var partial_arg = Trainer$ReasonTrainer.Decode[/* table */2];
  var tables = Json_decode.field("tables", (function (param) {
          return Json_decode.list(partial_arg, param);
        }), str);
  return /* record */[
          /* table */List.hd(tables),
          /* tables */tables,
          /* editing */false,
          /* completed_sessions */Json_decode.field("completed_sessions", (function (param) {
                  return Json_decode.list(session$1, param);
                }), str)
        ];
}

var Decode = /* module */[
  /* session */session$1,
  /* state */state$1
];

var state$2 = /* record */[/* contents : record */[
    /* table */undefined,
    /* tables : [] */0,
    /* editing */false,
    /* completed_sessions : [] */0
  ]];

function selectTable(tableName, state) {
  var tmp;
  try {
    tmp = List.find((function (param) {
            return param[/* name */1] === tableName;
          }), state[/* tables */1]);
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      tmp = undefined;
    } else {
      throw exn;
    }
  }
  return /* record */[
          /* table */tmp,
          /* tables */state[/* tables */1],
          /* editing */state[/* editing */2],
          /* completed_sessions */state[/* completed_sessions */3]
        ];
}

function update(fn) {
  state$2[0] = Curry._1(fn, state$2[0]);
  return /* () */0;
}

function saveState(state$3) {
  var json = Json.stringify(state(state$3));
  localStorage.setItem("store", json);
  return /* () */0;
}

function loadState() {
  var param = localStorage.getItem("store");
  state$2[0] = param !== null ? state$1(Json.parseOrRaise(param)) : state$2[0];
  return /* () */0;
}

function startSession(table, session) {
  var newSession_002 = /* start */Date.now();
  var finish = function (state) {
    return /* record */[
            /* table */state[/* table */0],
            /* tables */state[/* tables */1],
            /* editing */state[/* editing */2],
            /* completed_sessions : :: */[
              /* record */[
                /* table */table,
                /* session */session,
                newSession_002,
                /* _end */Date.now()
              ],
              state[/* completed_sessions */3]
            ]
          ];
  };
  return (function () {
      update(finish);
      return saveState(state$2[0]);
    });
}

function render(fn) {
  return Curry._1(fn, state$2[0]);
}

loadState(/* () */0);

exports.Encode = Encode;
exports.Decode = Decode;
exports.state = state$2;
exports.selectTable = selectTable;
exports.update = update;
exports.saveState = saveState;
exports.loadState = loadState;
exports.startSession = startSession;
exports.render = render;
/*  Not a pure module */
