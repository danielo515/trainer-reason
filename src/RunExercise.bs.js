// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Util$ReactTemplate = require("./Util.bs.js");
var HorizontalList$ReactTemplate = require("./HorizontalList.bs.js");

var component = ReasonReact.reducerComponent("Example");

function countDown(amount, fn) {
  if (amount > 0) {
    setTimeout((function () {
            Curry._1(fn, amount - 1 | 0);
            return countDown(amount - 1 | 0, fn);
          }), 1000);
    return /* () */0;
  } else {
    return 0;
  }
}

function initialState(param) {
  var series = param[/* series */1];
  return /* record */[
          /* count */0,
          /* rest */param[/* rest */2],
          /* reps */List.hd(series),
          /* series */List.tl(series),
          /* resting */false,
          /* finished */false
        ];
}

function make(exercise, onComplete, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */(function () {
              return initialState(exercise);
            }),
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var message = "You are training: " + exercise[/* name */0];
              var match = !self[/* state */1][/* finished */5];
              var tmp;
              if (match) {
                var match$1 = self[/* state */1][/* resting */4];
                tmp = React.createElement("button", {
                      className: "button is-primary is-fullwidth",
                      disabled: self[/* state */1][/* resting */4],
                      onClick: (function () {
                          Curry._1(self[/* send */3], /* Complete */0);
                          return countDown(exercise[/* rest */2], (function (amount) {
                                        return Curry._1(self[/* send */3], /* Rest */[amount]);
                                      }));
                        })
                    }, match$1 ? "Resting..." : "Done!");
              } else {
                tmp = React.createElement("button", {
                      className: "button is-primary",
                      onClick: (function () {
                          return Curry._1(self[/* send */3], /* Finish */1);
                        })
                    }, "Next Exercise!");
              }
              return React.createElement("div", undefined, React.createElement("span", undefined, message), tmp, React.createElement("br", undefined), "Count " + String(self[/* state */1][/* count */0]), React.createElement("br", undefined), "Rest ", React.createElement("progress", {
                              className: "progress is-primary is-large",
                              max: String(exercise[/* rest */2]),
                              value: String(self[/* state */1][/* rest */1])
                            }, Util$ReactTemplate.textInt(self[/* state */1][/* rest */1])), React.createElement("br", undefined), "REPS " + String(self[/* state */1][/* reps */2]), ReasonReact.element(undefined, undefined, HorizontalList$ReactTemplate.make(exercise[/* series */1], self[/* state */1][/* count */0], /* array */[])), React.createElement("br", undefined), "Remaining " + String(List.length(self[/* state */1][/* series */3])));
            }),
          /* initialState */(function () {
              return initialState(exercise);
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                if (action !== 0) {
                  Curry._1(onComplete, exercise[/* name */0]);
                  return /* Update */Block.__(0, [/* record */[
                              /* count */0,
                              /* rest */state[/* rest */1],
                              /* reps */state[/* reps */2],
                              /* series */state[/* series */3],
                              /* resting */false,
                              /* finished */false
                            ]]);
                } else {
                  return /* Update */Block.__(0, [/* record */[
                              /* count */state[/* count */0] + 1 | 0,
                              /* rest */exercise[/* rest */2],
                              /* reps */List.hd(state[/* series */3]),
                              /* series */List.tl(state[/* series */3]),
                              /* resting */true,
                              /* finished */state[/* finished */5]
                            ]]);
                }
              } else {
                var remaining = action[0];
                var resting = remaining !== 0;
                var completed = List.length(state[/* series */3]) === 0;
                var finished = !resting && completed;
                return /* Update */Block.__(0, [/* record */[
                            /* count */state[/* count */0],
                            /* rest */remaining,
                            /* reps */state[/* reps */2],
                            /* series */state[/* series */3],
                            /* resting */resting,
                            /* finished */finished
                          ]]);
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.component = component;
exports.countDown = countDown;
exports.initialState = initialState;
exports.make = make;
/* component Not a pure module */
