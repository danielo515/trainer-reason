// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");

var component = ReasonReact.reducerComponent("Example");

function countDown(amount, fn) {
  if (amount > 0) {
    setTimeout((function () {
            Curry._1(fn, amount - 1 | 0);
            return countDown(amount - 1 | 0, fn);
          }), 1000);
    return /* () */0;
  } else {
    return 0;
  }
}

function make(exercise, onComplete, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var message = "You are training: " + exercise[/* name */0];
              return React.createElement("div", undefined, message, React.createElement("button", {
                              disabled: self[/* state */1][/* resting */2],
                              onClick: (function () {
                                  Curry._1(self[/* send */3], /* Complete */0);
                                  return countDown(exercise[/* rest */3], (function (amount) {
                                                return Curry._1(self[/* send */3], /* Rest */[amount]);
                                              }));
                                })
                            }, "Done!"), "Count " + String(self[/* state */1][/* count */0]), "Rest " + String(self[/* state */1][/* rest */1]));
            }),
          /* initialState */(function () {
              return /* record */[
                      /* count */0,
                      /* rest */0,
                      /* resting */false
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (action) {
                var remaining = action[0];
                var match = remaining === 0;
                var resting = match ? false : true;
                if (!resting && state[/* count */0] === exercise[/* series */2]) {
                  Curry._1(onComplete, exercise[/* name */0]);
                }
                return /* Update */Block.__(0, [/* record */[
                            /* count */state[/* count */0],
                            /* rest */remaining,
                            /* resting */resting
                          ]]);
              } else {
                return /* Update */Block.__(0, [/* record */[
                            /* count */state[/* count */0] + 1 | 0,
                            /* rest */exercise[/* rest */3],
                            /* resting */true
                          ]]);
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.component = component;
exports.countDown = countDown;
exports.make = make;
/* component Not a pure module */
