// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Input$ReasonTrainer = require("./Input.bs.js");
var Button$ReasonTrainer = require("./Button.bs.js");

var component = ReasonReact.reducerComponent("Create-exercise");

function initialState() {
  return /* record */[
          /* name */"",
          /* series : [] */0,
          /* rest */30,
          /* completed */0
        ];
}

function setSerieAt(x, i) {
  return (function (param) {
      return List.mapi((function (idx, y) {
                    var match = idx === i;
                    if (match) {
                      return x;
                    } else {
                      return y;
                    }
                  }), param);
    });
}

function make(onSubmit, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              var send = param[/* send */3];
              var state = param[/* state */1];
              return React.createElement("div", undefined, ReasonReact.element(undefined, undefined, Input$ReasonTrainer.make((function (value) {
                                    return Curry._1(send, /* UpdateName */Block.__(0, [value]));
                                  }), /* Text */0, state[/* name */0], "Exercise name", /* array */[])), ReasonReact.element(undefined, undefined, Input$ReasonTrainer.make((function (value) {
                                    return Curry._1(send, /* UpdateRest */Block.__(1, [value]));
                                  }), /* Number */1, String(state[/* rest */2]), "Resting", /* array */[])), ReasonReact.element(undefined, undefined, Button$ReasonTrainer.make((function () {
                                    return Curry._1(send, /* AddSerie */0);
                                  }), undefined, "+", undefined, /* array */[])), $$Array.of_list(List.mapi((function (i, serie) {
                                    return ReasonReact.element(String(i), undefined, Input$ReasonTrainer.make((function (value) {
                                                      return Curry._1(send, /* UpdateSerie */Block.__(2, [/* tuple */[
                                                                      Caml_format.caml_int_of_string(value),
                                                                      i
                                                                    ]]));
                                                    }), /* Number */1, String(serie), undefined, /* array */[]));
                                  }), state[/* series */1])), ReasonReact.element(undefined, undefined, Button$ReasonTrainer.make((function () {
                                    return Curry._1(send, /* Submit */1);
                                  }), undefined, "Save exercise", undefined, /* array */[])));
            }),
          /* initialState */(function () {
              return /* record */[
                      /* name */"",
                      /* series : [] */0,
                      /* rest */30,
                      /* completed */0
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                if (action === 0) {
                  return /* Update */Block.__(0, [/* record */[
                              /* name */state[/* name */0],
                              /* series : :: */[
                                10,
                                state[/* series */1]
                              ],
                              /* rest */state[/* rest */2],
                              /* completed */state[/* completed */3]
                            ]]);
                } else {
                  return /* UpdateWithSideEffects */Block.__(2, [
                            /* record */[
                              /* name */"",
                              /* series : [] */0,
                              /* rest */30,
                              /* completed */0
                            ],
                            (function () {
                                return Curry._1(onSubmit, state);
                              })
                          ]);
                }
              } else {
                switch (action.tag | 0) {
                  case 0 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* name */action[0],
                                  /* series */state[/* series */1],
                                  /* rest */state[/* rest */2],
                                  /* completed */state[/* completed */3]
                                ]]);
                  case 1 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* name */state[/* name */0],
                                  /* series */state[/* series */1],
                                  /* rest */Caml_format.caml_int_of_string(action[0]),
                                  /* completed */state[/* completed */3]
                                ]]);
                  case 2 : 
                      var match = action[0];
                      return /* Update */Block.__(0, [/* record */[
                                  /* name */state[/* name */0],
                                  /* series */setSerieAt(match[0], match[1])(state[/* series */1]),
                                  /* rest */state[/* rest */2],
                                  /* completed */state[/* completed */3]
                                ]]);
                  
                }
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.component = component;
exports.initialState = initialState;
exports.setSerieAt = setSerieAt;
exports.make = make;
/* component Not a pure module */
